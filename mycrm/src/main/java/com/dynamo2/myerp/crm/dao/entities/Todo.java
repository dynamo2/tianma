package com.dynamo2.myerp.crm.dao.entities;

// Generated Mar 24, 2012 8:55:50 PM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityResult;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.dynamo2.myerp.crm.dao.entities.resultmap.CustomerTodo;

/**
 * Todo generated by hbm2java
 */
@Entity
@Table(name = "todo")
@SqlResultSetMapping(name = "CustomerTODO", entities = @EntityResult(entityClass = CustomerTodo.class))
@NamedNativeQueries(value = { @NamedNativeQuery(name = "queryCustomerTodoByAccount", query = "select t.id, c.id customerId, c.name customerName, t.title, t.plan_start planStart, "
		+ "t.plan_end planEnd, t.actual_start actualStart, t.actual_end actualEnd, t.assigneer_account assigneeAccount, "
		+ "t.assigner_account assignerAccount, t.created_by createdBy "
		+ " from todo t join customer c on (t.for_id=c.id and t.for_type='customer') "
		+ " where t.assigneer_account=? or t.assigner_account=? or t.created_by=? or t.last_modified_by=?"
		+ " order by t.actual_start asc", resultSetMapping = "CustomerTODO") })
@NamedQueries(value = {
		@NamedQuery(name = "countAllNotStartedTodo", query = "select count(*) from Todo where actualStart is null"),
		@NamedQuery(name = "countAllNotFinishedTodo", query = "select count(*) from Todo where actualStart is not null and actualEnd is null"),
		@NamedQuery(name = "countAllFinishedTodoPerMonth", query = "select year(created), month(created), count(*) from Todo where actualEnd is not null group by year(created), month(created)") })
public class Todo implements java.io.Serializable {
	private static final long serialVersionUID = 1L;

	public final static String FOR_CUSTOMER = "customer";

	private Long id;
	private Long forId;
	private String forType;
	private String description;
	private Date planStart;
	private Date planEnd;
	private Date actualStart;
	private Date actualEnd;
	private Date created;
	private String createdBy;
	private Date lastModified;
	private String lastModifiedBy;
	private String assigneerAccount;
	private String assignerAccount;
	private String type;
	private String title;
	private List<Notes> notes;

	public Todo() {
	}

	public Todo(Date lastModified) {
		this.lastModified = lastModified;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "for_id")
	public Long getForId() {
		return this.forId;
	}

	public void setForId(Long forId) {
		this.forId = forId;
	}

	@Column(name = "for_type")
	public String getForType() {
		return this.forType;
	}

	public void setForType(String forType) {
		this.forType = forType;
	}

	@Column(name = "description", length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "plan_start", length = 19)
	public Date getPlanStart() {
		return this.planStart;
	}

	public void setPlanStart(Date planStart) {
		this.planStart = planStart;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "plan_end", length = 19)
	public Date getPlanEnd() {
		return this.planEnd;
	}

	public void setPlanEnd(Date planEnd) {
		this.planEnd = planEnd;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "actual_start", length = 19)
	public Date getActualStart() {
		return this.actualStart;
	}

	public void setActualStart(Date actualStart) {
		this.actualStart = actualStart;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "actual_end", length = 19)
	public Date getActualEnd() {
		return this.actualEnd;
	}

	public void setActualEnd(Date actualEnd) {
		this.actualEnd = actualEnd;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 45)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_modified", nullable = false, length = 19)
	public Date getLastModified() {
		return this.lastModified;
	}

	public void setLastModified(Date lastModified) {
		this.lastModified = lastModified;
	}

	@Column(name = "last_modified_by", length = 45)
	public String getLastModifiedBy() {
		return this.lastModifiedBy;
	}

	public void setLastModifiedBy(String lastModifiedBy) {
		this.lastModifiedBy = lastModifiedBy;
	}

	@Column(name = "assigneer_account")
	public String getAssigneerAccount() {
		return assigneerAccount;
	}

	public void setAssigneerAccount(String assigneerAccount) {
		this.assigneerAccount = assigneerAccount;
	}

	@Column(name = "assigner_account")
	public String getAssignerAccount() {
		return assignerAccount;
	}

	public void setAssignerAccount(String assignerAccount) {
		this.assignerAccount = assignerAccount;
	}

	@Transient
	public List<Notes> getNotes() {
		return notes;
	}

	public void setNotes(List<Notes> notes) {
		this.notes = notes;
	}

	@Column(name = "type")
	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "title")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

}
