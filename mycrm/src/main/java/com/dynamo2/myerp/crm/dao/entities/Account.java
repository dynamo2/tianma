package com.dynamo2.myerp.crm.dao.entities;

// Generated Mar 20, 2012 11:10:03 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.*;

import javax.persistence.*;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.dynamo2.myerp.crm.service.constant.Roles_ENUM;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account")
public class Account implements java.io.Serializable {

	private static final long serialVersionUID = -8457549822720118430L;

	private Long id;
    private Account parent;
    private Long parentId = 0L;
    private List<Account> children;
	private String account;
	private String roles;
    private Set roleSet;
	private Date created;
	private String lastModifiedBy;
	private String createdBy;
	private Date lastModified;
	private Person person;
	private Long customerId;
	private String password;
	private String notes;
	private String agentCompanyName;
	private String language;
	private List<String> rolesList;

	public Account() {
	}

	public Account(Date lastModified) {
		this.lastModified = lastModified;
	}

	public Account(Long id, String account, String roles, Date created, String lastModifiedBy, String createdBy,
			Date lastModified, Person person, String password) {
		this.id = id;
		this.account = account;
		this.roles = roles;
		this.created = created;
		this.lastModifiedBy = lastModifiedBy;
		this.createdBy = createdBy;
		this.lastModified = lastModified;
		this.person = person;
		this.password = password;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@NotNull
	@Column(name = "account", length = 45, unique = true)
	public String getAccount() {
		return this.account;
	}

	public void setAccount(String account) {
		this.account = account;
	}

	@Column(name = "roles")
	public String getRoles() {
		return this.roles;
	}

	public void setRoles(String roles) {
		this.roles = roles;
        this.roleSet = null;
	}

    public boolean hasRole(String role) {
        if(this.roleSet == null){
            this.roleSet = new HashSet();

            String[] roleArray = this.roles.split(",");
            if(roleArray != null && roleArray.length > 0){
                this.roleSet.addAll(Arrays.asList(roleArray));
            }
        }

        return this.roleSet.contains(role);
    }

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "last_modified_by", length = 45)
	public String getLastModifiedBy() {
		return this.lastModifiedBy;
	}

	public void setLastModifiedBy(String lastModifiedBy) {
		this.lastModifiedBy = lastModifiedBy;
	}

	@Column(name = "created_by", length = 45)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_modified", nullable = false, length = 19)
	public Date getLastModified() {
		return this.lastModified;
	}

	public void setLastModified(Date lastModified) {
		this.lastModified = lastModified;
	}

	@ManyToOne(cascade = { CascadeType.ALL })
	@Fetch(FetchMode.JOIN)
	@JoinColumn(name = "person_id", insertable = true, updatable = true)
	public Person getPerson() {
		return person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	@Column(name = "password", length = 45)
	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Transient
	public List<String> getRoleList() {

		if (rolesList == null) {
			rolesList = new LinkedList<String>();

			if (roles != null && !roles.isEmpty()) {
				rolesList.addAll(Arrays.asList(roles.split(",")));
			}
		}

		return rolesList;
	}

	@Transient
	public List<String> getRoleListInGUI() {

		List<String> rs = new LinkedList<String>();
		rs.addAll(getRoleList());
		Iterator<String> iter = rs.iterator();
		while (iter.hasNext()) {
			if (Roles_ENUM.ROLE_SUPERVISOR.name().equalsIgnoreCase(iter.next())) {
				iter.remove();
				break;
			}
		}

		return rs;
	}

	
	public void setRoleList(List<String> roleList) {
		this.rolesList = roleList;

		StringBuilder str = new StringBuilder();
		for (String role : roleList) {
			str.append(role + ",");
		}
		if (str.length() > 0)
			roles = str.substring(0, str.length() - 1);
		else
			roles = "";
	}

	@Transient
	public String getAccountName() {
		if (person != null) {
			return person.getRealName() + "(" + account + ":" + id + ")";
		}

		return "(" + account + ":" + id + ")";
	}

	@Column(name = "notes")
	public String getNotes() {
		return notes;
	}

	public void setNotes(String notes) {
		this.notes = notes;
	}

	@Column(name = "agent_company_name")
	public String getAgentCompanyName() {
		return agentCompanyName;
	}

	public void setAgentCompanyName(String agentCompanyName) {
		this.agentCompanyName = agentCompanyName;
	}

	@Column(name = "language")
	public String getLanguage() {
		return language;
	}

	public void setLanguage(String language) {
		this.language = language;
	}

	@Column(name = "customer_id")
	public Long getCustomerId() {
		return customerId;
	}

	public void setCustomerId(Long customerId) {
		this.customerId = customerId;
	}

    @ManyToOne(fetch= FetchType.EAGER, targetEntity=Account.class)
    @JoinColumn(name="parent_id", insertable=false, updatable=false)
    public Account getParent() {
        return parent;
    }

    public void setParent(Account parent) {
        this.parent = parent;
        //设置父节点的时候，将当前节点加入到父节点的孩子列表中
        if(parent != null){
            parent.addChild(this);
        }
    }

    @Transient
    public List<Account> getChildren() {
        return children;
    }

    public void setChildren(List<Account> children) {
        this.children = children;
    }

    public void addChild(Account c){
        if(children == null){
            children = new ArrayList<Account>();
        }
        children.add(c);
    }

    @Column(name = "parent_id")
    public Long getParentId() {
        return parentId;
    }

    public void setParentId(Long parentId) {
        this.parentId = parentId;
    }

    @Transient
    public String getRealName() {
        String rn = "";

        if(this.getPerson() != null){
            rn = this.getPerson().getRealName();
        }
        return rn;
    }
}
